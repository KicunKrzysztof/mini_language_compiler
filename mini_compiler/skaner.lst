
// ==========================================================================
//  GPLEX error listing for lex source file <skaner.lex>
// ==========================================================================
//  Version:  1.2.2
//  Machine:  DESKTOP-F5UB616
//  DateTime: 6/20/2020 12:37:44 PM
//  UserName: Krzys
// ==========================================================================



%using QUT.Gppg;
%namespace GardensPoint
%int lineno = 0;
//^^-^^^
// Error: Unknown LEX tag name
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------

IntNumber   [0-9]+
RealNumber  [0-9]+\.[0-9]+
Ident       [A-Za-z][A-Za-z0-9]*
Comments		"\/\/(.*)$"
Whitespaces		[ \t\r]+
Newline			\n
String			"(.*)"

%%
"program"			{ Console.WriteLine("program"); yylloc = new LexLocation(69, 0, 0, 0); return (int)Tokens.Program; }
"if"				{ Console.WriteLine("program"); return (int)Tokens.If; }
"else"				{ Console.WriteLine("program"); return (int)Tokens.Else; }
"while"				{ Console.WriteLine("program"); return (int)Tokens.While; }
"read"				{ Console.WriteLine("program"); return (int)Tokens.Read; }
"write"				{ Console.WriteLine("program"); return (int)Tokens.Write; }
"return"			{ Console.WriteLine("program"); return (int)Tokens.Return; }
"int"				{ Console.WriteLine("program"); return (int)Tokens.Int; }
"double"			{ Console.WriteLine("program"); return (int)Tokens.Double; }
"bool"				{ Console.WriteLine("program"); return (int)Tokens.Bool; }
"false"				{ Console.WriteLine("program"); return (int)Tokens.False; }
"true"				{ Console.WriteLine("program"); return (int)Tokens.True; }
"="					{ Console.WriteLine("program"); return (int)Tokens.Assign; }
"||"				{ Console.WriteLine("program"); return (int)Tokens.Or; }
"&&"				{ Console.WriteLine("program"); return (int)Tokens.And; }
"|"					{ Console.WriteLine("program"); return (int)Tokens.BitwiseOr; }
"&"					{ Console.WriteLine("program"); return (int)Tokens.BitwiseAnd; }
"=="				{ Console.WriteLine("program"); return (int)Tokens.Equals; }
"!="				{ Console.WriteLine("program"); return (int)Tokens.NotEquals; }
">"					{ Console.WriteLine("program"); return (int)Tokens.GreaterThan; }
">="				{ Console.WriteLine("program"); return (int)Tokens.GreaterEqual; }
"<"					{ Console.WriteLine("program"); return (int)Tokens.LessThan; }
"<="				{ Console.WriteLine("program"); return (int)Tokens.LessEqual; }
"+"					{ Console.WriteLine("program"); return (int)Tokens.Plus; }
"-"					{ Console.WriteLine("program"); return (int)Tokens.Minus; }
"*"					{ Console.WriteLine("program"); return (int)Tokens.Mul; }
"/"					{ Console.WriteLine("program"); return (int)Tokens.Div; }
"!"					{ Console.WriteLine("program"); return (int)Tokens.Not; }
"~"					{ Console.WriteLine("program"); return (int)Tokens.BitwiseNot; }
"("					{ Console.WriteLine("program"); return (int)Tokens.OpenPar; }
")"					{ Console.WriteLine("program"); return (int)Tokens.ClosePar; }
"{"					{ Console.WriteLine("{"); yylloc = new LexLocation(69, 0, 0, 0); return (int)Tokens.OpenCurly; }
"}"					{ Console.WriteLine("}"); yylloc = new LexLocation(69, 0, 0, 0); return (int)Tokens.CloseCurly; }
";"					{ Console.WriteLine("program"); return (int)Tokens.Semicolon; }
{Newline}			{ ++lineno;}
{Ident}				{ Console.WriteLine("program"); yylval.val=yytext; return(int)Tokens.Ident; }
{RealNumber}		{ Console.WriteLine("program"); yylval.val=yytext; return(int)Tokens.RealNumber; }
{IntNumber}			{ Console.WriteLine("program"); yylval.val=yytext; return(int)Tokens.IntNumber; }
{String}			{ Console.WriteLine("program"); yylval.val=yytext; return(int)Tokens.String; }
{Whitespaces}		;
{Comments}			;


%%
// ==========================================================================

